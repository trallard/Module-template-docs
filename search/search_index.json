{
    "docs": [
        {
            "location": "/about/",
            "text": "Modules-template\n\n\nWhat is Modules template?\n\n\nModules template is a Jekyll template tailored specifically for use by academics and researchers wanting to generate a \nliterate programming friendly\n and \nhassle free\n static website.\nThis can be used as a scientific blog template or as a webpage to host/display projects information, scientific outputs or as a site for academic modules.\n\n\nIt's features include the ability to create blog posts, create and host \nReveal.js\n presentations and render mathematical equarions using LaTeX syntax. It also enables tight integration with Jupyter notebooks.\n\n\nIt is also designed to be hosted on GitHub pages. Modules template allows you to create a well designed, functional and completely free website. Hosting on GitHub pages allows you to keep the website in one place, even if you move between institutions.\n\n\nThe live demo of this template can be found at \nhttp://bitsandchips.me/Modules-template/\n \ud83d\udcbb\n\n\nWhat is a Static Website?\n\n\nStatic websites are websites that do not require a database to store and deliver content to site visitors. In some ways static websites are more similar to early websites in that they rely primarily upon HTML and CSS to serve rather simple content to visitors. However, do not let the simplicity imply that they are somehow inferior to a dynamic website option such as WordPress.\n\n\nStatic websites have many advantages over dynamic websites. They are relatively simple to maintain, fast to load and incredibly secure. By creating a website that is not overly reliant upon third party software platforms you remain in total control of your content. You know exactly where every file for the website is, and do not have to worry about your content becoming trapped in a proprietary system or database.\n\n\nWhat is a Static Website Generator?\n\n\nA static website generator is a tool that takes flat files and processes them into the necessary HTML and CSS files to become a website. In the case of Jekyll Academic the majority of the files are written using the Markdown markup language. It is a simplified text markup language that allows you to mimic the features of HTML without needing to know HTML. Jekll is built using the Ruby programming language, it can take the Markdown and sass files that are in the Jekyll Academic directory and process those files, creating a fully functioning website.\n\n\nIs this the right type of site for me?\n\n\nWhile there are many advantages of using a static website generator to create your academic website, it may not be the right tool for everyone. This type of website is best suited for websites consisting mainly of static text content. If you are looking for a site to host some presentations, course materials, Jupyter notebooks, as well as some text based pages (course notes, blog posts) it will likely suit your needs.",
            "title": "About"
        },
        {
            "location": "/about/#modules-template",
            "text": "",
            "title": "Modules-template"
        },
        {
            "location": "/about/#what-is-modules-template",
            "text": "Modules template is a Jekyll template tailored specifically for use by academics and researchers wanting to generate a  literate programming friendly  and  hassle free  static website.\nThis can be used as a scientific blog template or as a webpage to host/display projects information, scientific outputs or as a site for academic modules.  It's features include the ability to create blog posts, create and host  Reveal.js  presentations and render mathematical equarions using LaTeX syntax. It also enables tight integration with Jupyter notebooks.  It is also designed to be hosted on GitHub pages. Modules template allows you to create a well designed, functional and completely free website. Hosting on GitHub pages allows you to keep the website in one place, even if you move between institutions.  The live demo of this template can be found at  http://bitsandchips.me/Modules-template/  \ud83d\udcbb",
            "title": "What is Modules template?"
        },
        {
            "location": "/about/#what-is-a-static-website",
            "text": "Static websites are websites that do not require a database to store and deliver content to site visitors. In some ways static websites are more similar to early websites in that they rely primarily upon HTML and CSS to serve rather simple content to visitors. However, do not let the simplicity imply that they are somehow inferior to a dynamic website option such as WordPress.  Static websites have many advantages over dynamic websites. They are relatively simple to maintain, fast to load and incredibly secure. By creating a website that is not overly reliant upon third party software platforms you remain in total control of your content. You know exactly where every file for the website is, and do not have to worry about your content becoming trapped in a proprietary system or database.",
            "title": "What is a Static Website?"
        },
        {
            "location": "/about/#what-is-a-static-website-generator",
            "text": "A static website generator is a tool that takes flat files and processes them into the necessary HTML and CSS files to become a website. In the case of Jekyll Academic the majority of the files are written using the Markdown markup language. It is a simplified text markup language that allows you to mimic the features of HTML without needing to know HTML. Jekll is built using the Ruby programming language, it can take the Markdown and sass files that are in the Jekyll Academic directory and process those files, creating a fully functioning website.",
            "title": "What is a Static Website Generator?"
        },
        {
            "location": "/about/#is-this-the-right-type-of-site-for-me",
            "text": "While there are many advantages of using a static website generator to create your academic website, it may not be the right tool for everyone. This type of website is best suited for websites consisting mainly of static text content. If you are looking for a site to host some presentations, course materials, Jupyter notebooks, as well as some text based pages (course notes, blog posts) it will likely suit your needs.",
            "title": "Is this the right type of site for me?"
        },
        {
            "location": "/",
            "text": "Modules template Quickstart\n\n\nRequired software\n\n\nIt is possible to get up and running with a Jekyll Academic website using only your web browser and a GitHub account. Full documentation for \nlocal installation and editing\n can be found on the \nDocumentation \n page.\n\n\nQuickstart\n\n\nThis QuickStart guide is geared to getting you up and running quickly, using only a web browser and GitHub account. Following the directions below will result in you having a Modules template website hosted on GitHub pages live on the web. Before you begin working through the QuickStart guide you may want to familiarise yourself with the following technologies that will be used to create your Jekyll Academic website:\n\n\n\n\nJekyll\n\n\nMarkdown\n\n\nGitHub\n\n\nGitHub Pages\n\n\n\n\n\n\n1) Register for a GitHub Account\n\n\nSkip this step if you have already setup your GitHub account\n\n\n\n\nIn a web browser, navigate to \nGitHub.com\n\n\nFill Out Username*, Email Address and Password\n\n\nClick Sign up for GitHub button\n\n\nClick the Finish Sign Up button\n\n\n\n\n*Make a note of the username that you create, as you will be required to use it in setting up your GitHub pages repository.\n\n\n2) Verify Email Address\n\n\n\n\nNavigate to the email account you used to sign up\n\n\nVerify your email address by clicking on the \u201cVerify email address\u201d button in the email you received from GitHub\n\n\n\n\n3) Setting Up your Modules template Repository:\n\n\n\n\nFrom your main profile page in GitHub click on New Repository\n\n\nIf you plan on having this site as your personal or organisation site name your repository like so: \n[username].github.io \n* otherwise choose a suitable name (e.g COM777)\n\n\nClick on Create Repository\n\n\nClick on the \nImport Code\n button under the \n\"...or import code from another repository\"\n section\n\n\nPaste the following URL in the \u201cYour old repository\u2019s clone URL\" section \nhttps://github.com/trallard/Modules-template\n\n\nClick on Begin Import\n\n\nOnce the import is complete go to your repository settings tab and make note of the URL address for you site.\n\n\n\n\n*Note: For for GitHub Pages site to work correctly, the repository name must exactly match the format of [username].github.io. For example if your GitHub username is student1234 your GitHub Pages repository must be named student1234.github.io\n\n\n4) See your Live Website\n\n\n\n\nClick on the URL you found in Step 3. You should see the site live with the demo content\n\n\n\n\n5) Edit Site Files via GitHub Browser Editor\n\n\n\n\nOpen a second web browser tab that shows the files in your repository github.com/[username]/[username].github.io\n\n\nEdit the main settings file for your website to add your name, and to link your accounts\n\n\nClick on the  \n_config.yml\n file in your repository to see the contents of that file\n\n\nClick on the \u2018Edit This File\u2019 button\n\n\nEdit the following entries of the \n_config.yml\n file\n\n\n\n\ntitle: Module template\ndescription: Lorem ipsum dolor sit amet understanding yourself in the universe tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nbaseurl: \"/Module_template\"\nurl: \"\" # the base hostname & protocol for your site\n\n# Author's information\nauthor:\n  name: Tania Allard\n\n\n\n\nThese constitute the basic setup needed for your website and \nmust\n be set accordingly.\n\n\nThe title and description are used in the landing page as well as to generate canonical urls for the website.\n\n\nThe variable\n\nbaseurl\n is the name of your repository which is \n/Modules_template\n by default (as per this repository).\n\n\nMake sure to change this to match your own repository and website.\n\n\nIf you have trouble understanding what the \nbaseurl\n and \nurl\n variables are visit \nhttps://byparker.com/blog/2014/clearing-up-confusion-around-baseurl/\n.\n\n\n6) Commit Changes to GitHub\n\n\n\n\nAfter making changes to the file, make a note under the \u2018Commit Changes\u2019 section documenting the changes that you made (e.g. Updated social media usernames)\n\n\nClick \u2018Commit changes\u2019\n\n\nRefresh the browser tab that contains your live website ([username].github.io) and confirm that changes were made to your site\n\n\n\n\nNext Steps\n\n\nAfter following the steps above you now have a fully functioning website that others can view online. You can continue to edit other files on the site.\n\n\nFollowing the instructions on the \nDocumentation\n will allow you to set up your computer to edit your files locally. It also offers a full explanation of the site structure, providing detailed instructions for fully customising your new website.",
            "title": "Quickstart"
        },
        {
            "location": "/#modules-template-quickstart",
            "text": "",
            "title": "Modules template Quickstart"
        },
        {
            "location": "/#required-software",
            "text": "It is possible to get up and running with a Jekyll Academic website using only your web browser and a GitHub account. Full documentation for  local installation and editing  can be found on the  Documentation   page.",
            "title": "Required software"
        },
        {
            "location": "/#quickstart",
            "text": "This QuickStart guide is geared to getting you up and running quickly, using only a web browser and GitHub account. Following the directions below will result in you having a Modules template website hosted on GitHub pages live on the web. Before you begin working through the QuickStart guide you may want to familiarise yourself with the following technologies that will be used to create your Jekyll Academic website:   Jekyll  Markdown  GitHub  GitHub Pages",
            "title": "Quickstart"
        },
        {
            "location": "/#1-register-for-a-github-account",
            "text": "Skip this step if you have already setup your GitHub account   In a web browser, navigate to  GitHub.com  Fill Out Username*, Email Address and Password  Click Sign up for GitHub button  Click the Finish Sign Up button   *Make a note of the username that you create, as you will be required to use it in setting up your GitHub pages repository.",
            "title": "1) Register for a GitHub Account"
        },
        {
            "location": "/#2-verify-email-address",
            "text": "Navigate to the email account you used to sign up  Verify your email address by clicking on the \u201cVerify email address\u201d button in the email you received from GitHub",
            "title": "2) Verify Email Address"
        },
        {
            "location": "/#3-setting-up-your-modules-template-repository",
            "text": "From your main profile page in GitHub click on New Repository  If you plan on having this site as your personal or organisation site name your repository like so:  [username].github.io  * otherwise choose a suitable name (e.g COM777)  Click on Create Repository  Click on the  Import Code  button under the  \"...or import code from another repository\"  section  Paste the following URL in the \u201cYour old repository\u2019s clone URL\" section  https://github.com/trallard/Modules-template  Click on Begin Import  Once the import is complete go to your repository settings tab and make note of the URL address for you site.   *Note: For for GitHub Pages site to work correctly, the repository name must exactly match the format of [username].github.io. For example if your GitHub username is student1234 your GitHub Pages repository must be named student1234.github.io",
            "title": "3) Setting Up your Modules template Repository:"
        },
        {
            "location": "/#4-see-your-live-website",
            "text": "Click on the URL you found in Step 3. You should see the site live with the demo content",
            "title": "4) See your Live Website"
        },
        {
            "location": "/#5-edit-site-files-via-github-browser-editor",
            "text": "Open a second web browser tab that shows the files in your repository github.com/[username]/[username].github.io  Edit the main settings file for your website to add your name, and to link your accounts  Click on the   _config.yml  file in your repository to see the contents of that file  Click on the \u2018Edit This File\u2019 button  Edit the following entries of the  _config.yml  file   title: Module template\ndescription: Lorem ipsum dolor sit amet understanding yourself in the universe tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nbaseurl: \"/Module_template\"\nurl: \"\" # the base hostname & protocol for your site\n\n# Author's information\nauthor:\n  name: Tania Allard  These constitute the basic setup needed for your website and  must  be set accordingly.  The title and description are used in the landing page as well as to generate canonical urls for the website.  The variable baseurl  is the name of your repository which is  /Modules_template  by default (as per this repository).  Make sure to change this to match your own repository and website.  If you have trouble understanding what the  baseurl  and  url  variables are visit  https://byparker.com/blog/2014/clearing-up-confusion-around-baseurl/ .",
            "title": "5) Edit Site Files via GitHub Browser Editor"
        },
        {
            "location": "/#6-commit-changes-to-github",
            "text": "After making changes to the file, make a note under the \u2018Commit Changes\u2019 section documenting the changes that you made (e.g. Updated social media usernames)  Click \u2018Commit changes\u2019  Refresh the browser tab that contains your live website ([username].github.io) and confirm that changes were made to your site",
            "title": "6) Commit Changes to GitHub"
        },
        {
            "location": "/#next-steps",
            "text": "After following the steps above you now have a fully functioning website that others can view online. You can continue to edit other files on the site.  Following the instructions on the  Documentation  will allow you to set up your computer to edit your files locally. It also offers a full explanation of the site structure, providing detailed instructions for fully customising your new website.",
            "title": "Next Steps"
        },
        {
            "location": "/documentation/",
            "text": "\ud83d\udc53 Documentation\n\n\n\n\nThe following is meant as a more complete set of documentation than the QuickStart guide. If you have not yet completed the QuickStart guide it is recommended that you begin there - as it will provide the necessary steps to setting up your GitHub repository and transferring the source files.\n\n\n\n\n\u2728 Software Requirements\n\n\nIn order to edit your Modules template website locally you will need the following pieces of software:\n\n\n\n\nText Editor\n\n\nGit\n\n\nJekyll\n\n\n\n\n\u2728 How to use Jekyll to build this site?\n\n\nEditing pages online with GitHub\n\n\nYou can edit any page by following the \"Edit this page\" link in the Quick links nav bar. Alternatively, you can directly navigate to the corresponding .md (Markdown) file in GitHub.\n\n\nThis will drop you in GitHub's file editing interface, where you can modify the source code, preview it, and save your changes, by giving a short description of what you modified. If you have write access to the repository (hint: you do), your modifications will be published right-away. If you do not have right access, you will be asked to fork the repository and make a pull request.\n\n\nMost of the pages are written in Markdown, which is a textual format for generating formatted text. Markdown syntax is very intuitive, you can get a quick review here or here.\n\n\nCAVEATS: The Markdown engine used by this site is Kramdown. Its syntax definitions are slightly different form GitHub Flavored Markdown, thus the preview feature in GitHub might not render source as in the final result.\n\n\nOther reasons why GitHub's preview may not correspond to the final results are:\n\n\n\n\nUse of Liquid templates in the source. This is seldom used, but some pages use them to access site-wide configuration variables.\n\n\nUse of special purpose markup, HTML, and scripts, such as mathematical excerpts written in MathJax.\n\n\n\n\nWorking locally\n\n\nIf you want to do more than the occasional editing, you'll soon\nrealise GitHub's editor and preview are too limited. It's better to\nwork locally on your computer.\n\n\nAll you need to work locally is a \nGit client\n.\n\nClone the repository\n\nand start coding right away.\n\n\nAt some point, you will need to preview your work, but pushing to\nGitHub each time you want to preview is clumsy.  \ud83d\ude15\nYour best option is to\n\ninstall Jekyll and the required dependencies\n\non your machine. It is recommended to install the\n\nGitHub pages gem\n which provides\nyou with the exact same versions used by GitHub to compile your site. By not doing so you might risk your website not building properly when being pushed to your GitHub repository.\n\n\nIf you already have Ruby, the install part should be as easy as\n\n\ngem install github-pages -V\n\n\n\n\nNote that you will need Ruby headers (\nruby-dev\n package on Ubuntu) in\norder to compile C dependencies.\n\n\nOn OS X, you can just type \nsudo gem install github-pages -V\n.\n\n\nNow you can \ncd\n into your local clone of the repository and launch\nthe compilation by\n\n\njekyll serve -w -b\n\n\n\n\nYour site will be generated in a \n_site\n sub-directory, and served\nlive at \nhttp://localhost:4000/\n (or \nhttp://username.io/localhost:4000/\n depending on your site configuration). Any changes to the sources will\ntrigger an automatic recompilation!\n\n\n\n\n\u2728 Important Files and Folders\n\n\nIn order to better understand how everything in your site works, there are a few files and folders that you need to be aware of. These files control the main elements of your site, including your logo, bio photo and navigation. Full documentation of the directory structure can be found \nhere\n.\n\n\n\n\n\n\n_config.yml\n - This is your websites main configuration file. It allows you to set a site title, links to your social media accounts as well as a logo and bio photo image.\n\n\n\n\n\n\nbasic_style.scss\n - This file is used to set the colours of your site. The site is set up to accept two colours (primary and secondary). This will set the colours for all the website components. Also, you can change the font and font colour of the banner and navigation bar depending on the colours chosen before.\n\n\n\n\n\n\n_posts\n - This folder holds all of the posts and presentations for your website. There is one sample post file and one sample presentation file located in this directory by default.\n\n\n\n\n\n\nimages/logo-sheffield.png\n - This is the photo that appears on the home page of the website. You can change this to match your institution logo and update the path in your config.yml file.\n\n\n\n\n\n\nimages/dna.png\n - This is the default image for the modules cards in your landing page. If you want to use a different one you will have to update the path in your config.yml file.\n\n\n\n\n\n\npages/about.md\n - This contains the main information of your module and is rendered as the Getting started section in the landing page.\n\n\n\n\n\n\n\n\n\u2728 Customising your site's appearance\n\n\nHow do I change the colour scheme?\n\n\nThe color scheme follows \nGoogle's material design\n style and is specified in terms of a primary and a secondary color, which can be modified in the \nbasic_style.scss\n file in the root directory.\n\n\nIf you want to modify the color scheme or the fonts used you only need to modify this file and they will be automatically updated as the site is built. You can use RGB or HEX values.\n\n\n$primary: #778f9b;\n\n\nAlternatively, a guide for the MDB colour aliases can be found \nhere\n.\n\n\nNote that depending on colour scheme you use for your website you might need to change the colour of some components to ensure appropriate contrast and readability.\n\n\nThe banner and navigation bar font colour can be changed to improve readability in the same \nbasic_style.scss\n:\n\n\n$banner-col: $black;\n\n\nYou can choose to have a \n$white\n or a \n$black\n font, or even assign a custom colour.\n\n\nAdding a logo and card images\n\n\nIf you need to add a logo to your website you can do it by saving the image to the 'images' folder and modify the name of the image in the \nconfig.yml\n file:\n\n\nlogo: \"./images/logo-sheffield.png\"\n\n\n\n\nsimilarly, if you want all the landing page cards to display the same image change the path accordingly in the \n_config.yml\n file\n\n\ncard_image: \"./images/dna.jpg\"\n\n\n\n\notherwise, if you want to have different images for your various modules, you will have to specify an image on the module file YAML front matter e.g.\n\n\nlayout: module\ntitle: Day 1 outline\ncategory: module\ndescription: This is the description for the module\nfeatured: ./images/dna2.jpg",
            "title": "Getting started"
        },
        {
            "location": "/documentation/#documentation",
            "text": "The following is meant as a more complete set of documentation than the QuickStart guide. If you have not yet completed the QuickStart guide it is recommended that you begin there - as it will provide the necessary steps to setting up your GitHub repository and transferring the source files.",
            "title": "\ud83d\udc53 Documentation"
        },
        {
            "location": "/documentation/#software-requirements",
            "text": "In order to edit your Modules template website locally you will need the following pieces of software:   Text Editor  Git  Jekyll",
            "title": "\u2728 Software Requirements"
        },
        {
            "location": "/documentation/#how-to-use-jekyll-to-build-this-site",
            "text": "",
            "title": "\u2728 How to use Jekyll to build this site?"
        },
        {
            "location": "/documentation/#editing-pages-online-with-github",
            "text": "You can edit any page by following the \"Edit this page\" link in the Quick links nav bar. Alternatively, you can directly navigate to the corresponding .md (Markdown) file in GitHub.  This will drop you in GitHub's file editing interface, where you can modify the source code, preview it, and save your changes, by giving a short description of what you modified. If you have write access to the repository (hint: you do), your modifications will be published right-away. If you do not have right access, you will be asked to fork the repository and make a pull request.  Most of the pages are written in Markdown, which is a textual format for generating formatted text. Markdown syntax is very intuitive, you can get a quick review here or here.  CAVEATS: The Markdown engine used by this site is Kramdown. Its syntax definitions are slightly different form GitHub Flavored Markdown, thus the preview feature in GitHub might not render source as in the final result.  Other reasons why GitHub's preview may not correspond to the final results are:   Use of Liquid templates in the source. This is seldom used, but some pages use them to access site-wide configuration variables.  Use of special purpose markup, HTML, and scripts, such as mathematical excerpts written in MathJax.",
            "title": "Editing pages online with GitHub"
        },
        {
            "location": "/documentation/#working-locally",
            "text": "If you want to do more than the occasional editing, you'll soon\nrealise GitHub's editor and preview are too limited. It's better to\nwork locally on your computer.  All you need to work locally is a  Git client . Clone the repository \nand start coding right away.  At some point, you will need to preview your work, but pushing to\nGitHub each time you want to preview is clumsy.  \ud83d\ude15\nYour best option is to install Jekyll and the required dependencies \non your machine. It is recommended to install the GitHub pages gem  which provides\nyou with the exact same versions used by GitHub to compile your site. By not doing so you might risk your website not building properly when being pushed to your GitHub repository.  If you already have Ruby, the install part should be as easy as  gem install github-pages -V  Note that you will need Ruby headers ( ruby-dev  package on Ubuntu) in\norder to compile C dependencies.  On OS X, you can just type  sudo gem install github-pages -V .  Now you can  cd  into your local clone of the repository and launch\nthe compilation by  jekyll serve -w -b  Your site will be generated in a  _site  sub-directory, and served\nlive at  http://localhost:4000/  (or  http://username.io/localhost:4000/  depending on your site configuration). Any changes to the sources will\ntrigger an automatic recompilation!",
            "title": "Working locally"
        },
        {
            "location": "/documentation/#important-files-and-folders",
            "text": "In order to better understand how everything in your site works, there are a few files and folders that you need to be aware of. These files control the main elements of your site, including your logo, bio photo and navigation. Full documentation of the directory structure can be found  here .    _config.yml  - This is your websites main configuration file. It allows you to set a site title, links to your social media accounts as well as a logo and bio photo image.    basic_style.scss  - This file is used to set the colours of your site. The site is set up to accept two colours (primary and secondary). This will set the colours for all the website components. Also, you can change the font and font colour of the banner and navigation bar depending on the colours chosen before.    _posts  - This folder holds all of the posts and presentations for your website. There is one sample post file and one sample presentation file located in this directory by default.    images/logo-sheffield.png  - This is the photo that appears on the home page of the website. You can change this to match your institution logo and update the path in your config.yml file.    images/dna.png  - This is the default image for the modules cards in your landing page. If you want to use a different one you will have to update the path in your config.yml file.    pages/about.md  - This contains the main information of your module and is rendered as the Getting started section in the landing page.",
            "title": "\u2728 Important Files and Folders"
        },
        {
            "location": "/documentation/#customising-your-sites-appearance",
            "text": "",
            "title": "\u2728 Customising your site's appearance"
        },
        {
            "location": "/documentation/#how-do-i-change-the-colour-scheme",
            "text": "The color scheme follows  Google's material design  style and is specified in terms of a primary and a secondary color, which can be modified in the  basic_style.scss  file in the root directory.  If you want to modify the color scheme or the fonts used you only need to modify this file and they will be automatically updated as the site is built. You can use RGB or HEX values.  $primary: #778f9b;  Alternatively, a guide for the MDB colour aliases can be found  here .  Note that depending on colour scheme you use for your website you might need to change the colour of some components to ensure appropriate contrast and readability.  The banner and navigation bar font colour can be changed to improve readability in the same  basic_style.scss :  $banner-col: $black;  You can choose to have a  $white  or a  $black  font, or even assign a custom colour.",
            "title": "How do I change the colour scheme?"
        },
        {
            "location": "/documentation/#adding-a-logo-and-card-images",
            "text": "If you need to add a logo to your website you can do it by saving the image to the 'images' folder and modify the name of the image in the  config.yml  file:  logo: \"./images/logo-sheffield.png\"  similarly, if you want all the landing page cards to display the same image change the path accordingly in the  _config.yml  file  card_image: \"./images/dna.jpg\"  otherwise, if you want to have different images for your various modules, you will have to specify an image on the module file YAML front matter e.g.  layout: module\ntitle: Day 1 outline\ncategory: module\ndescription: This is the description for the module\nfeatured: ./images/dna2.jpg",
            "title": "Adding a logo and card images"
        },
        {
            "location": "/add_content/",
            "text": "\ud83d\udcc3 Adding content to your site\n\n\n\u2728 Understanding Layouts\n\n\nOne of the fundamental elements of Jekyll is the ability to utilize different layouts for different types of pages. The layouts are found in the _layouts folder. These are .html files that drive the layout of any particular page. For example the 'slide' layout contains all of the necessary includes to power Reveal.js slides. The current available layouts in Modules  template are:\n\n\n\n\nlanding\n- This layout is the layout for the homepage of your website. It\n\n\npage\n - This layout is used for any individual page, like the 'About Me' page. It is a blank page that can be formatted using Markdown.\n\n\nslides_index\n - This layout is used for reveal.js presentations. It includes a few more functionalities than the 'page' layout.\n\n\nslide\n - This layout is used for creating a Reveal.js slide deck.\n\n\nnotebook\n - This layout is optimised to include Jupyter notebooks in your site.\n\n\n\n\n\u2728 Generating the pages for the lecture modules or projects\n\n\nYou will have noticed by now that this template displays cards in the landing page, which correspond to the various modules or sessions in your course.\n\n\nEach these modules or sessions should be declared as a collection in the \n_config.yml\n file so that Jekyll knows where to read e.g.\n\n\ncollections:\n  - module1\n    output: true\n  - module2\n    output: true\n\n\n\n\n(leaving the output as \ntrue\n ensures the generation of an html page for each of the files contained in the directory)\n\n\nYou will then need to generate a folder for each module (using the exact same name you used in the configuration file) adding an underscore to the folder's name e.g. \n_module1\n\n\nFinally, you need to make sure there is a\n.md\n file that will serve as the front page to the module / collection. The easiest way to get this done is by copying the \nbase_module.md\n file in the \n_posts\n folder.\n\n\nThe mandatory fields for the front matter are (examples are provided in the template inside the collections \n_Day1\nand \n_Day2\n):\n\n\nlayout: module\ntitle: Day 1 outline\ndescription: This is the description for the module\n\n\n\n\nYour modules will be automatically added to the landing page in the form of a card as well as to the main navigation menu on the website.\n\n\nYou can then start populating these with other .md files or jupyter notebooks.\nThe urls and redirects to the files within the collection folders are generated\nautomatically and added to the front page of each module/project.\n\n\n\n\nAny additional pages (e.g. about, code of conduct, profile, resources) must be created and saved in the \n_pages\n directory.\nOnce this is done the pages will be automatically added to the sidebar menu.\n\n\n\u2728 Adding Reveal.js Presentations\n\n\nIn Modules templates presentations are actually set up as posts, and live in the same \n_posts\n folder as your blog posts. They also must use the same file naming convention as posts (yyyy-mm-dd-title.md). The main difference between a blog post and a Reveal.js presentation is the layout and category used in the YAML front matter.\n\n\nReveal.js is integrated so that you can generate your slides using .md files. To get started you need to add this YAML front matter at the beginning of your file:\n\n\n---\nlayout: slide\ntitle: Add Your Title Here\nexcerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\nmodified: 2016-01-13 20:41:38\ntags: [intro, beginner, jekyll, tutorial]\ncomments: true\ncategory: presentation\ntheme: simple\n---\n<section data-markdown>\n# Add Reveal.js slide content here, following the Reveal.js format\n# Each <section> corresponds to a slide in the presentation deck\n</section>\n\n\n\nYou can choose any of the default \nReveal.js themes\n in the YAML front matter (e.g. \ntheme: simple\n), othwerwise, the default theme will be the black theme.\n\n\nNote that Reveal.js presentations must use \nslide\n as the layout and \npresentation\n as the category.\n\n\n\u2728 Adding Links to External Presentations\n\n\nIf you would rather use another service, like Google Presentations for your presentations you can still link to them from your Modules  template website. To do so start a new file in your \n_posts\n directory following the same yyyy-mm-dd-title.md file name convention and paste the following YAML front matter into that file.\n\n\n  ---\n  layout: default\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  category: presentation\n  ---\n  # Title of Presentation\n  ## SubTitle of Presentation\n  [Text for Link](html link to presentation)\n\n\n\nIn the above example you are using the \ndefault\n layout, but giving it a \npresentation\n category. This means it will give you a blank post page, but will appear under your list of presentations. The content on this page can be anything, but you will need to at least add a link to wherever your presentation is located.",
            "title": "Adding content"
        },
        {
            "location": "/add_content/#adding-content-to-your-site",
            "text": "",
            "title": "\ud83d\udcc3 Adding content to your site"
        },
        {
            "location": "/add_content/#understanding-layouts",
            "text": "One of the fundamental elements of Jekyll is the ability to utilize different layouts for different types of pages. The layouts are found in the _layouts folder. These are .html files that drive the layout of any particular page. For example the 'slide' layout contains all of the necessary includes to power Reveal.js slides. The current available layouts in Modules  template are:   landing - This layout is the layout for the homepage of your website. It  page  - This layout is used for any individual page, like the 'About Me' page. It is a blank page that can be formatted using Markdown.  slides_index  - This layout is used for reveal.js presentations. It includes a few more functionalities than the 'page' layout.  slide  - This layout is used for creating a Reveal.js slide deck.  notebook  - This layout is optimised to include Jupyter notebooks in your site.",
            "title": "\u2728 Understanding Layouts"
        },
        {
            "location": "/add_content/#generating-the-pages-for-the-lecture-modules-or-projects",
            "text": "You will have noticed by now that this template displays cards in the landing page, which correspond to the various modules or sessions in your course.  Each these modules or sessions should be declared as a collection in the  _config.yml  file so that Jekyll knows where to read e.g.  collections:\n  - module1\n    output: true\n  - module2\n    output: true  (leaving the output as  true  ensures the generation of an html page for each of the files contained in the directory)  You will then need to generate a folder for each module (using the exact same name you used in the configuration file) adding an underscore to the folder's name e.g.  _module1  Finally, you need to make sure there is a .md  file that will serve as the front page to the module / collection. The easiest way to get this done is by copying the  base_module.md  file in the  _posts  folder.  The mandatory fields for the front matter are (examples are provided in the template inside the collections  _Day1 and  _Day2 ):  layout: module\ntitle: Day 1 outline\ndescription: This is the description for the module  Your modules will be automatically added to the landing page in the form of a card as well as to the main navigation menu on the website.  You can then start populating these with other .md files or jupyter notebooks.\nThe urls and redirects to the files within the collection folders are generated\nautomatically and added to the front page of each module/project.   Any additional pages (e.g. about, code of conduct, profile, resources) must be created and saved in the  _pages  directory.\nOnce this is done the pages will be automatically added to the sidebar menu.",
            "title": "\u2728 Generating the pages for the lecture modules or projects"
        },
        {
            "location": "/add_content/#adding-revealjs-presentations",
            "text": "In Modules templates presentations are actually set up as posts, and live in the same  _posts  folder as your blog posts. They also must use the same file naming convention as posts (yyyy-mm-dd-title.md). The main difference between a blog post and a Reveal.js presentation is the layout and category used in the YAML front matter.  Reveal.js is integrated so that you can generate your slides using .md files. To get started you need to add this YAML front matter at the beginning of your file:  ---\nlayout: slide\ntitle: Add Your Title Here\nexcerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\nmodified: 2016-01-13 20:41:38\ntags: [intro, beginner, jekyll, tutorial]\ncomments: true\ncategory: presentation\ntheme: simple\n---\n<section data-markdown>\n# Add Reveal.js slide content here, following the Reveal.js format\n# Each <section> corresponds to a slide in the presentation deck\n</section>  You can choose any of the default  Reveal.js themes  in the YAML front matter (e.g.  theme: simple ), othwerwise, the default theme will be the black theme.  Note that Reveal.js presentations must use  slide  as the layout and  presentation  as the category.",
            "title": "\u2728 Adding Reveal.js Presentations"
        },
        {
            "location": "/add_content/#adding-links-to-external-presentations",
            "text": "If you would rather use another service, like Google Presentations for your presentations you can still link to them from your Modules  template website. To do so start a new file in your  _posts  directory following the same yyyy-mm-dd-title.md file name convention and paste the following YAML front matter into that file.    ---\n  layout: default\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  category: presentation\n  ---\n  # Title of Presentation\n  ## SubTitle of Presentation\n  [Text for Link](html link to presentation)  In the above example you are using the  default  layout, but giving it a  presentation  category. This means it will give you a blank post page, but will appear under your list of presentations. The content on this page can be anything, but you will need to at least add a link to wherever your presentation is located.",
            "title": "\u2728 Adding Links to External Presentations"
        },
        {
            "location": "/advanced/",
            "text": "Advanced features\n\n\nModules template was designed having in mind those academics that use technologies\nsuch as Jupyter notebooks for their lectures and research dissemination. Thus we have added extra functionalities for you.\n\n\n\u2728 Launching your notebooks in Microsoft Azure notebooks\n\n\nLet's say you have your class notebooks in this repository (or even another one). If you want to import your notebooks and add an extra button to your site follow the next steps.\n\n\n\n\nCreate an account at \nMicrosfot Azure Notebooks\n\n\nAdd the following to the top \nREADME.md\n file of \nthe repository containing the notebooks\n\n\n\n\n<a href=\"https://notebooks.azure.com/import/gh/<your username>/<your repository>\"><img src=\"https://img.shields.io/badge/launch-azurenb-blue.svg\" /></a>\n\n\n\n\n\n\nCommit and push the changes to GitHub\n\n\n\n\nThis will add the following badge to your repo README:\n\n\n\nYou will then be able to click on the \nlaunch azurenb\n badge and automatically import the notebooks to \nMicrosoft Azure Notebooks\n.\n\nMake sure to copy your library url for the following steps.\n\n\nOnce you have the notebooks in a Microsoft Azure Notebooks library you can add a 'launch in Azure notebooks'\nbutton to your notebooks within your static website (like the one shown below).\n\n\n\n\n\n\nTo do so, you need to set the azure variable in your \n_config.yml\n  file to true e.g:\n\n\n\n\nazure: true\n\n\n\n\nIf you do not have your notebooks in Azure notebooks only comment the line with a\n\n#\n.\n\n\nThen you can supply an Azure library per collection (e.g. if you're using this site\nfor various course modules) by specifying this in your \n_config.yml\n:\n\n\ncollections:\n  - module1\n    azure: \"https://notebooks.azure.com/trallard/libraries/BAD-days\"\n    output: true\n\n\n\n\nIMPORTANT:\n  the variable needs to be declared as azure to be then added to the\nrendered notebooks\n\n\n\n\n\u2728 Converting Jupyter notebooks to Jekyll posts\n\n\nYou can convert your notebooks locally into a Jekyll compliant post using the \nnbjekyll\n package.\n\n\nPre-requisites\n\n\n\n\nPython > 3.4\n\n\npytest\n\n\nnbjekyll (install using \npip install nbjekyll\n)\n\n\npygit2 (if you use conda the easiest way to get this installed is by doing \nconda install -c conda-forge pygit2\n)\n\n\nnbval (install using \npip install nbval\n)\n\n\n\n\nHow do I do it?\n\n\n\n  \n Add your Jupyter notebook to the corresponding collection (e.g. \n_Day1\n) \n\n  \n Commit the notebook to Git \n\n\ngit add Tutorial.ipynb\ngit commit -m Add Tutorial\n\n\n\n\n From the command line use nbjekyll to convert your notebooks: \n\n\npython -m nbjekyll.convert_nbs\n\n\n\n\nIf everything goes ok you should see a new \n.md\n file with the same title of your notebook and the output images in \n./images/notebook_images/\n. To get more information on nbjekyll go to \nhttps://github.com/trallard/nbjekyll\n\n\nYour newly converted notebooks will look something like this:\n\n\n\n\nDo I need to commit before converting?\n\n\nYes\n.\n\n\nAs you can see in the image above, the rendered notebook shows the following information:\n\n\n\n\nThe code version (sha1 for the latest version, or Git commit)\n\n\nWhen it was last updated and by whom\n\n\nBadge indicating validation: this is done using \nnbval\n and tells you if your notebook is broken\n\n\n\n\nIf your notebooks are not committed to your version control system nbjekyll will not be able to convert and add the super nice and informative heading!\n\n\n\n\n\u2728 Enabling Continuous Integration for your site\n\n\nTesting your software regularly makes it easier to find and fix bugs \ud83d\udc1b. Your newly created Jekyll website can be automatically tested using Travis CI, follow the next steps:\n\n\n\n\nGo to \nhttps://travis-ci.org/\n and sign in using your GitHub account.\n\n\nIn the upper right corner click on your name (or choose Accounts) to open your Travis-ci profile.\nYou'll be presented with the list of your GitHub projects (only the ones where you have administrative authority) e.g.\n\n\nEnable Travis CI on your site repository \n\n\n\n\nWe have provided the necessary \n.travis.yml\n file and a script \nscripts/site_check\n within Modules template. So the next time you push your changes to GitHub Travis CI will check your site for broken links, images, and missing HTML tags.",
            "title": "Advanced features"
        },
        {
            "location": "/advanced/#advanced-features",
            "text": "Modules template was designed having in mind those academics that use technologies\nsuch as Jupyter notebooks for their lectures and research dissemination. Thus we have added extra functionalities for you.",
            "title": "Advanced features"
        },
        {
            "location": "/advanced/#launching-your-notebooks-in-microsoft-azure-notebooks",
            "text": "Let's say you have your class notebooks in this repository (or even another one). If you want to import your notebooks and add an extra button to your site follow the next steps.   Create an account at  Microsfot Azure Notebooks  Add the following to the top  README.md  file of  the repository containing the notebooks   <a href=\"https://notebooks.azure.com/import/gh/<your username>/<your repository>\"><img src=\"https://img.shields.io/badge/launch-azurenb-blue.svg\" /></a>   Commit and push the changes to GitHub   This will add the following badge to your repo README:  You will then be able to click on the  launch azurenb  badge and automatically import the notebooks to  Microsoft Azure Notebooks . Make sure to copy your library url for the following steps.  Once you have the notebooks in a Microsoft Azure Notebooks library you can add a 'launch in Azure notebooks'\nbutton to your notebooks within your static website (like the one shown below).    To do so, you need to set the azure variable in your  _config.yml   file to true e.g:   azure: true  If you do not have your notebooks in Azure notebooks only comment the line with a # .  Then you can supply an Azure library per collection (e.g. if you're using this site\nfor various course modules) by specifying this in your  _config.yml :  collections:\n  - module1\n    azure: \"https://notebooks.azure.com/trallard/libraries/BAD-days\"\n    output: true  IMPORTANT:   the variable needs to be declared as azure to be then added to the\nrendered notebooks",
            "title": "\u2728 Launching your notebooks in Microsoft Azure notebooks"
        },
        {
            "location": "/advanced/#converting-jupyter-notebooks-to-jekyll-posts",
            "text": "You can convert your notebooks locally into a Jekyll compliant post using the  nbjekyll  package.",
            "title": "\u2728 Converting Jupyter notebooks to Jekyll posts"
        },
        {
            "location": "/advanced/#pre-requisites",
            "text": "Python > 3.4  pytest  nbjekyll (install using  pip install nbjekyll )  pygit2 (if you use conda the easiest way to get this installed is by doing  conda install -c conda-forge pygit2 )  nbval (install using  pip install nbval )",
            "title": "Pre-requisites"
        },
        {
            "location": "/advanced/#how-do-i-do-it",
            "text": "Add your Jupyter notebook to the corresponding collection (e.g.  _Day1 )  \n    Commit the notebook to Git   git add Tutorial.ipynb\ngit commit -m Add Tutorial   From the command line use nbjekyll to convert your notebooks:   python -m nbjekyll.convert_nbs  If everything goes ok you should see a new  .md  file with the same title of your notebook and the output images in  ./images/notebook_images/ . To get more information on nbjekyll go to  https://github.com/trallard/nbjekyll  Your newly converted notebooks will look something like this:",
            "title": "How do I do it?"
        },
        {
            "location": "/advanced/#do-i-need-to-commit-before-converting",
            "text": "Yes .  As you can see in the image above, the rendered notebook shows the following information:   The code version (sha1 for the latest version, or Git commit)  When it was last updated and by whom  Badge indicating validation: this is done using  nbval  and tells you if your notebook is broken   If your notebooks are not committed to your version control system nbjekyll will not be able to convert and add the super nice and informative heading!",
            "title": "Do I need to commit before converting?"
        },
        {
            "location": "/advanced/#enabling-continuous-integration-for-your-site",
            "text": "Testing your software regularly makes it easier to find and fix bugs \ud83d\udc1b. Your newly created Jekyll website can be automatically tested using Travis CI, follow the next steps:   Go to  https://travis-ci.org/  and sign in using your GitHub account.  In the upper right corner click on your name (or choose Accounts) to open your Travis-ci profile.\nYou'll be presented with the list of your GitHub projects (only the ones where you have administrative authority) e.g.  Enable Travis CI on your site repository    We have provided the necessary  .travis.yml  file and a script  scripts/site_check  within Modules template. So the next time you push your changes to GitHub Travis CI will check your site for broken links, images, and missing HTML tags.",
            "title": "\u2728 Enabling Continuous Integration for your site"
        }
    ]
}